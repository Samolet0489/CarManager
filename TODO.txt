############# Some commands we can use (now my pytests work)
$env:PYTHONPATH = ".;./src"
pytest

to run tests with random behaviour:

pytest .\tests\inconsistentGarbage\

#############


210724:
Why tf do the pytests work half the time?
sommatime maybve good somma taime may be shit
Run them 15 times and you will get a good one XDDD
PLZ FIX THIS!!!!

200724:
add a back button to the important dates HTMl
ensure that the dates work properly and potentially add some logic with the dates. to do somethign cool
there is still nothing about the OIL!!!!!!
and then you might think of something cool to do with the mechanics


todo:  RUNNING PYTEST DELETES THE DB!!!!!!!!!!! %%%%%%%%%%
    pytests are set up but results random?!??
    I am sick of this so I am going to sleep good luck future me
    everything works great so far. Think if you want to expand on features or testing

ajde leka




RN: Go get food :p

150724:
fuel should be all done
maybbe implement an edit function in case of a mistake but you could also leave it reliant on the main edit function
of the vehicle

todo: {done :) } OPTIONAL
    make it so that you can edit past refuels

todo: made some preperation for tests (implement them) This is Hell >:(

110724:
started implementation of the fuel stuff:

DO I change the database so that it saves the last few refuels or something like that
For now am not planning on doing the profile thing

Done:
added new html for refueling
added fuel millage to the front page
added a refueling button to the vehicle_info page

later same day:
I think I did everything fuel orientated
NEXT:
think about important dates stuff
maybe think about a cool feature with the expenses and such.


todo: {done}
    How do i want to save the data in the database (do I want a history or do I want just a fuel millage)
    Just the fuel millage will be easier but a bit pointless (it will be cooler with a history)
    IF!!! history is to be implemented the database will have to contain a new column that will have tuples with past refuels?

todo:
    Does the database clean itself when you remove a car and such you will have to clean it up
    add the important date things and such.... good luck

    add to gitignore the generated files (or maybe just the get_vehicles.json)

If I am not lazy I should have started it today evening :/

090724:
todo:THERE ARE NOT EDIT METHODS FOR ANYTHING!!!! {done for the vehicles,
                                                    everything else ehh..}

added the basic: add, delete for user (not tested)
added the edit to vehicles (still missing for everything else)
complete implementation of edit for the vehicles.

todo: rethink some of your choices for the feachers (not much lef)
todo: THERE ARE STILL MAIN functions MISSING!!!!!!!!!!

090524:

when we have more than 1 table the db gets locked

2 mechanics cant have the same phone - feature

#recommended check for multiple running queries

##################################################################################
080525:
todo
 Add users since every ser will gave their own database {the database can be local?}
 maybe limit the vehicles per user                      {this will be pointless}
 add a subscription or something so that the user can have more vehicles {that's extra}
 good luck!!!


----expand on the mechanic functions----
# get the data for a specific mechanic
#

# currently adding the mechanic and I realize I will probably need to todo connect the mechanic to the vehicle
# this sure isn't going to be painful


todo: add
 a second table for the mechanic (name, address, hourly_rate, preferred_brands?, status_BusyOrNot)
 Owner? (name, year of birth, address, budget, (add a car, get billed, pointless))
 Driver (for some reason I also have said I will do that)?
 (Might have to clean these up coz 2 out the 3 make no sense)



070524:
fixed a lot of the old stuff
implemented a proper Id system (overcomplicated ids for my needs might have to revisit)
prepared for the fuel stuff
and the dates stuff
added a remove option in the fn todo add it in flask too {done}

I may be missing something but I will commit it like this and revisit

todo:EDIT!!!!
 I forgot that I need to add an edit button and then make it so that I can edit stuff

##################################################################################
050524:

current front end url default:
http://127.0.0.1:5000/vehicles

progress:
made quite a few things, now the frontend works properly. ready to add other functions

potential problems:
the database is full of garbage
the id system is hell
cant save empty vehicles from the front end (this could be a feature) ****

todo {DONE} FIX THE ID SYSTEM!!!!! very important (does it have to be random?)

# might have to make a smaller db for each vehicle added that will follow things about it.
# might be a good idea to limit the user to an N amount of vehicles

##################################################################################
020524:


----------------------------------------------------------------------------
FIXED!: right now on get_vehicle data it does not get the fuel consumption
so that we can see the fuel consumption

----------------------------------------------------------------------------
toilet brake:
rn the get is broken fix it.....!
IT took me half an hour of getting the same error coz I discarded the changes every time is dropped the table
TODO: {at the bottom of this file} SAVE THE CHANGES AFTER DROPPING THE TABLE TO ENSURE CLEAN TESTING!!!




----------------------------------------------------------------------------
Clean up the required data so that we dont collect pointless stuff

officially claimed:
milage              - Added
fuel consumption    - Added
mechanic            - Pointless [removed]
owner               - Pointless [removed]
important dates = [] or {}

current:
self.id = id
self.name = name # here people can call their vehicle however they want
self.color = color  # people can set the exact color of the vehicle (in case of an accident the mechanic knows the paint)
self.expenses = expenses # total expenses (just adding up all expenses ever accumulated)
self.mileage = mileage
self.fuel_consumption = 0 # TODO: can you make it calculate it based on fill up data?
self.note = note # people can write a note with additional information about the car

data has been cleaned up: 17:38
##################################################################################
300424:
there might be a massive problem with the fact that we might need

-frontend
--react data comes here
-backend
--src
---python back end


#get started on the basic react model for the front end. Good luck.

##################################################################################
290424:
Lost the old todoFile for some reason

made a new one

dont really know what needs to be done.

TODO: {Done} redo the id system [MAKE SURE ITS INT]

flask is connected to the database

working with a midle file system and 2 servers

server 1 = react
server 2 = flask

s1 is connected to s2 with a middle (temp file folder)

s2 is the only one who gets to work with data
s1 only does the front end

##################################################################################
date unknown:

what if I just run the different methods as diffrent routes in the javascript

so this hell of a backend can just go away


################
TO_READ: |links to useful info|
https://flask.palletsprojects.com/en/3.0.x/patterns/sqlite3/
https://realpython.com/flask-javascript-frontend-for-rest-api/
################

TODO DOCUMENT EVERYTHING!!!!!!!!!!!!!!!!!! Write comments

290424:###########################################################
TODO: BEFORE A COMMIT MAKE SURE THAT YOU HAVE SELECTED THE CORRECT FILES {use: git add *}
the  .idea files should not go on github

Making the app and the essentials
wrote comments on everything that might be needed

careful on the push

TODO: {done} learn how to adopt the front end using JS and HTML (unfortunately its not possible directly)
research it on google


Test Data:
Create:
{
  "name": "Honda FMX650 2005",
  "color": "black",
  "expenses": 5000,
  "mileage": 43000,
  "fuel_consumption": 5.4,
  "note": "This is my motorcycle :D"
}
{
  "name": "Honda civic 2009",
  "color": "red",
  "expenses": 7000,
  "mileage": 98000,
  "fuel_consumption": 7.4,
  "note": "This is my car :D"
}
{
  "name": "BMW g20 2022",
  "color": "white",
  "expenses": 39000,
  "mileage": 66000,
  "fuel_consumption": 5.4,
  "note": "This is a nice car."
}
{
    "name": "BMW e46 m3",
    "color": "laguna sake blue",
    "expenses": 24000,
    "mileage": 199000,
    "fuel_consumption": 6.8,
    "note": "The dream car"
}